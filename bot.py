import asyncio
import logging
import os
import random
import csv
import requests
import io
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# URL –∫ —Ñ–∞–π–ª–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
TRUTHS_URL = os.getenv("TRUTHS_URL")
DARES_URL = os.getenv("DARES_URL")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è –∏–∑ CSV —Ñ–∞–π–ª–∞ –ø–æ URL
def get_random_item(url):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–æ URL
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç StringIO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CSV
        csv_data = io.StringIO(response.text)
        
        # –ß–∏—Ç–∞–µ–º CSV
        reader = csv.DictReader(csv_data)
        items = list(reader)
        
        if not items:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö üòï"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        item = random.choice(items)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ CSV –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ 'text')
        return item.get('text', "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ URL {url}: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ üòï"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {url}: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö üòï"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ".\n\n'
        '–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n'
        '/truth - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n'
        '/dare - –≤—ã–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n\n'
        '–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üéÆ'
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        '–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ":\n\n'
        '1. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É\n'
        '2. –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫—É, –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /truth\n'
        '3. –ß—Ç–æ–±—ã –¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É, –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /dare\n\n'
        '–í–µ—Å–µ–ª–æ–π –∏–≥—Ä—ã! üé≤'
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /truth
@dp.message(Command("truth"))
async def cmd_truth(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        await message.answer(
            "‚ùó –û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    from_user = message.from_user
    target_user = message.reply_to_message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Å–∞–º —Å–µ–±–µ
    if target_user.id == from_user.id:
        await message.answer("‚ùó –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ URL
        text = get_random_item(TRUTHS_URL)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–∏–ª ‚úÖ", callback_data=f"done_{target_user.id}"),
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå", callback_data=f"skip_{target_user.id}")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        await message.answer(
            f"ü§´ *–ü—Ä–∞–≤–¥–∞ –¥–ª—è* [{target_user.first_name}](tg://user?id={target_user.id}):\n\n_{text}_",
            parse_mode="Markdown",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"Error in truth command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dare
@dp.message(Command("dare"))
async def cmd_dare(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        await message.answer(
            "‚ùó –û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –≤—ã–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    from_user = message.from_user
    target_user = message.reply_to_message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Å–∞–º —Å–µ–±–µ
    if target_user.id == from_user.id:
        await message.answer("‚ùó –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ URL
        text = get_random_item(DARES_URL)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–∏–ª ‚úÖ", callback_data=f"done_{target_user.id}"),
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå", callback_data=f"skip_{target_user.id}")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        await message.answer(
            f"üéØ *–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è* [{target_user.first_name}](tg://user?id={target_user.id}):\n\n_{text}_",
            parse_mode="Markdown",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"Error in dare command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def process_callback(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data = callback.data
    user_id = callback.from_user.id
    
    if not data:
        return
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    action, target_id_str = data.split("_")
    target_user_id = int(target_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
    if user_id != target_user_id:
        await callback.answer("‚ùå –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –¥–ª—è —Ç–µ–±—è!", show_alert=True)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if action == "done" else "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ" if action == "skip" else None
    
    if not status:
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = callback.message.text if callback.message and callback.message.text else ""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    followup = "\n\nüëâ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ ‚Äî –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /truth –∏–ª–∏ /dare."
    new_text = f"{message_text}\n\n*–°—Ç–∞—Ç—É—Å:* {status}{followup}"
    
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            new_text,
            parse_mode="Markdown",
            reply_markup=None
        )
        await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
    except Exception as e:
        logging.error(f"Error editing message: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
@dp.my_chat_member()
async def on_chat_member_update(update: types.ChatMemberUpdated):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    old_status = update.old_chat_member.status
    new_status = update.new_chat_member.status
    
    # –ï—Å–ª–∏ –±–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É
    if (old_status in ["kicked", "left"] and new_status in ["member", "administrator"]):
        await bot.send_message(
            update.chat.id,
            'üëã –ü—Ä–∏–≤–µ—Ç! –Ø *–±–æ—Ç "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ"*.\n\n'
            '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç–µ —Å –ø–æ–º–æ—â—å—é:\n'
            '/truth ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n'
            '/dare ‚Äî –≤—ã–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n\n'
            '–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üéâ',
            parse_mode="Markdown"
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
async def check_url(url, description):
    try:
        response = requests.head(url, timeout=5)
        if response.status_code == 200:
            logging.info(f"{description} URL –¥–æ—Å—Ç—É–ø–µ–Ω: {url}")
            return True
        else:
            logging.warning(f"{description} URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {response.status_code}): {url}")
            return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {description} URL: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logging.info("Starting bot...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL —Å –¥–∞–Ω–Ω—ã–º–∏
    truths_available = await check_url(TRUTHS_URL, "Truths")
    dares_available = await check_url(DARES_URL, "Dares")
    
    if not truths_available:
        logging.warning(f"URL —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {TRUTHS_URL}")
    
    if not dares_available:
        logging.warning(f"URL —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {DARES_URL}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped!")