import { Telegraf, Markup } from "telegraf"
import { GameService } from "./services/game.service"
import { AdminService } from "./services/admin.service"

const bot = new Telegraf(process.env.BOT_TOKEN!)
const gameService = new GameService()
const adminId = Number(process.env.ADMIN_ID)
const adminService = new AdminService()

bot.on("message", async (ctx) => {
  // –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (ctx.chat.type !== "private") return

  // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
  if (ctx.from?.id !== adminId) {
    return ctx.reply(
      '–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –∏–≥—Ä–∞ "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ". –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /truth –∏–ª–∏ /dare üé≤',
    )
  }

  const [cmd, ...args] = ctx.message.text.split(" ")
  const argText = args.join(" ")
  const id = Number(args[0])
  const newText = args.slice(1).join(" ")

  try {
    switch (cmd) {
      case "/list_truth":
        const truths = await adminService.listTruths()
        return ctx.reply(truths.map((t) => `${t.id}. ${t.text}`).join("\n") || "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")

      case "/list_dare":
        const dares = await adminService.listDares()
        return ctx.reply(dares.map((d) => `${d.id}. ${d.text}`).join("\n") || "–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π")

      case "/add_truth":
        if (!argText) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è "–ü—Ä–∞–≤–¥—ã"')
        await adminService.addTruth(argText)
        return ctx.reply('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ "–ü—Ä–∞–≤–¥–∞"')

      case "/add_dare":
        if (!argText) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è "–î–µ–π—Å—Ç–≤–∏—è"')
        await adminService.addDare(argText)
        return ctx.reply('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ "–î–µ–π—Å—Ç–≤–∏–µ"')

      case "/del_truth":
        if (!id) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID")
        await adminService.deleteTruth(id)
        return ctx.reply('‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ "–ü—Ä–∞–≤–¥—ã"')

      case "/del_dare":
        if (!id) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID")
        await adminService.deleteDare(id)
        return ctx.reply('‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ "–î–µ–π—Å—Ç–≤–∏–π"')

      case "/edit_truth":
        if (!id || !newText) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
        await adminService.editTruth(id, newText)
        return ctx.reply('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ "–ü—Ä–∞–≤–¥–µ"')

      case "/edit_dare":
        if (!id || !newText) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
        await adminService.editDare(id, newText)
        return ctx.reply('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ "–î–µ–π—Å—Ç–≤–∏—è—Ö"')

      default:
        return ctx.reply(
          "‚öô –ö–æ–º–∞–Ω–¥—ã:\n/list_truth\n/add_truth <—Ç–µ–∫—Å—Ç>\n/edit_truth <id> <—Ç–µ–∫—Å—Ç>\n/del_truth <id>\n\n/list_dare\n/add_dare <—Ç–µ–∫—Å—Ç>\n/edit_dare <id> <—Ç–µ–∫—Å—Ç>\n/del_dare <id>",
        )
    }
  } catch (e) {
    console.error(e)
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
  }
})

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É
bot.on("my_chat_member", async (ctx) => {
  const update = ctx.update.my_chat_member
  const newStatus = update.new_chat_member.status
  const oldStatus = update.old_chat_member.status

  if (
    (oldStatus === "kicked" || oldStatus === "left") &&
    (newStatus === "member" || newStatus === "administrator")
  ) {
    await ctx.reply(
      `üëã –ü—Ä–∏–≤–µ—Ç! –Ø *–±–æ—Ç "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ"*.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç–µ —Å –ø–æ–º–æ—â—å—é:
/truth ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
/dare ‚Äî –≤—ã–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ

–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üéâ`,
      { parse_mode: "Markdown" },
    )
  }
})

// /truth
bot.command("truth", async (ctx) => {
  const fromUser = ctx.from
  const replyTo = ctx.message?.reply_to_message

  if (!replyTo) {
    return ctx.reply(
      "‚ùó –û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
    )
  }

  const targetUser = replyTo.from
  if (!targetUser || targetUser.id === fromUser.id) {
    return ctx.reply("‚ùó –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ–º—É —Å–µ–±–µ.")
  }

  const text = await gameService.getRandomTruth()
  const mention = `[${targetUser.first_name}](tg://user?id=${targetUser.id})`

  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback("–í—ã–ø–æ–ª–Ω–∏–ª ‚úÖ", `done_${targetUser.id}`),
    Markup.button.callback("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå", `skip_${targetUser.id}`),
  ])

  await ctx.reply(`ü§´ *–ü—Ä–∞–≤–¥–∞ –¥–ª—è* ${mention}:\n\n_${text}_`, {
    parse_mode: "Markdown",
    reply_markup: keyboard.reply_markup,
  })
})

// /dare
bot.command("dare", async (ctx) => {
  const fromUser = ctx.from
  const replyTo = ctx.message?.reply_to_message

  if (!replyTo) {
    return ctx.reply(
      "‚ùó –û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –≤—ã–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ.",
    )
  }

  const targetUser = replyTo.from
  if (!targetUser || targetUser.id === fromUser.id) {
    return ctx.reply("‚ùó –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
  }

  const text = await gameService.getRandomDare()
  const mention = `[${targetUser.first_name}](tg://user?id=${targetUser.id})`

  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback("–í—ã–ø–æ–ª–Ω–∏–ª ‚úÖ", `done_${targetUser.id}`),
    Markup.button.callback("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå", `skip_${targetUser.id}`),
  ])

  await ctx.reply(`üéØ *–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è* ${mention}:\n\n_${text}_`, {
    parse_mode: "Markdown",
    reply_markup: keyboard.reply_markup,
  })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on("callback_query", async (ctx) => {
  const data = ctx.callbackQuery.data
  const userId = ctx.from?.id
  const message = ctx.callbackQuery.message

  if (!data || !message) return

  const [action, targetIdStr] = data.split("_")
  const targetUserId = Number(targetIdStr)

  if (userId !== targetUserId) {
    return ctx.answerCbQuery("‚ùå –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –¥–ª—è —Ç–µ–±—è!", { show_alert: true })
  }

  const status = action === "done" ? "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" : action === "skip" ? "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ" : null

  if (!status) return ctx.answerCbQuery()

  const followup =
    "\n\nüëâ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ ‚Äî –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /truth –∏–ª–∏ /dare."
  const newText = `${message.text}\n\n*–°—Ç–∞—Ç—É—Å:* ${status}${followup}`

  try {
    await ctx.editMessageText(newText, {
      parse_mode: "Markdown",
      reply_markup: undefined,
    })
    await ctx.answerCbQuery("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", e)
  }
})

bot.launch()
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
